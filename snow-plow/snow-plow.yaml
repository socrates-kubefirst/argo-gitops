# Namespace Creation
apiVersion: v1
kind: Namespace
metadata:
  name: snowplow

---

apiVersion: v1
kind: Pod
metadata:
  name: debug-pod
  namespace: snowplow
spec:
  containers:
  - name: debug-container
    image: curlimages/curl:7.73.0
    command: ["sh", "-c", "sleep infinity"]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scala-stream-collector-config
  namespace: snowplow
data:
  config.hocon: |
    collector {
      interface = "0.0.0.0"
      port = 8080

      p3p {
        policyRef = "/w3c/p3p.xml"
        CP = "NOI DSP COR NID PSA OUR IND COM NAV STA"
      }

      crossDomain {
        enabled = true
        domains = [ "*" ]
        secure = false
      }

      cookie {
        enabled = true
        expiration = "365 days"
        name = snowplow
      }

      doNotTrackCookie {
        enabled = false
        name = snowplow_do_not_track
        value = snowplow_do_not_track_value
      }

      cookieBounce {
        enabled = false
        name = "n3pc"
        fallbackNetworkUserId = "00000000-0000-4000-A000-000000000000"
        forwardedProtocolHeader = "X-Forwarded-Proto"
      }

      redirectMacro {
        enabled = false
      }

      rootResponse {
        enabled = false
        statusCode = 302
        headers = {
            Location = "https://127.0.0.1/",
            X-Custom = "something"
        }
        body = "302, redirecting"
      }

      streams {
        good = snowplow_raw_good
        bad = snowplow_raw_bad
        useIpAddressAsPartitionKey = false

        sink {
          enabled = kafka
          brokers = "pkc-12576z.us-west2.gcp.confluent.cloud:9092"
          retries = 0
            producerConf {
              # Required connection configs for Kafka producer, consumer, and admin
              security.protocol=SASL_SSL
              sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='UJXR2AHHSOHL2O4K' password='L4piWdT0pE4t+LiP5xLrkfWxmhePL8jdk0LaSX2N5cSevSBF1EHjr2oygqJX64FC';
              sasl.mechanism=PLAIN
              # Required for correctness in Apache Kafka clients prior to 2.6
              client.dns.lookup=use_all_dns_ips
            }
        }

        buffer {
          byteLimit = 1000000
          recordLimit = 0
          timeLimit = 1000
        }
      }
    }

    akka {
      loglevel = DEBUG
      loggers = ["akka.event.slf4j.Slf4jLogger"]

      http.server {
        remote-address-header = on
        raw-request-uri-header = on

        parsing {
          max-uri-length = 32768
          uri-parsing-mode = relaxed
        }
      }
    }

---

apiVersion: v1
kind: Service
metadata:
  name: scala-stream-collector
  namespace: snowplow
spec:
  selector:
    app: scala-stream-collector
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: LoadBalancer
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: scala-stream-collector
  namespace: snowplow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scala-stream-collector
  template:
    metadata:
      labels:
        app: scala-stream-collector
    spec:
      containers:
      - name: scala-stream-collector
        image: snowplow/scala-stream-collector-kafka:2.9.2
        args: ["--config", "/snowplow/config/config.hocon"]
        volumeMounts:
        - name: config-volume
          mountPath: /snowplow/config
        env:
        - name: SP_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
      volumes:
      - name: config-volume
        configMap:
          name: scala-stream-collector-config

---

# Stream Enrich ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: stream-enrich-config
  namespace: snowplow
data:
  config.hocon: |
    enrich {
      streams {
        in {
          raw = snowplow_raw_good
        }
        out {
          enriched = snowplow_enriched_good
          bad = snowplow_enriched_bad
          partitionKey = user_fingerprint
        }
        sourceSink {
          enabled = kafka
          brokers = "pkc-12576z.us-west2.gcp.confluent.cloud:9092"
          retries = 0
            producerConf {
              # Required connection configs for Kafka producer, consumer, and admin
              security.protocol=SASL_SSL
              sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='UJXR2AHHSOHL2O4K' password='L4piWdT0pE4t+LiP5xLrkfWxmhePL8jdk0LaSX2N5cSevSBF1EHjr2oygqJX64FC';
              sasl.mechanism=PLAIN
              # Required for correctness in Apache Kafka clients prior to 2.6
              client.dns.lookup=use_all_dns_ips
            }
            consumerConf {
              security.protocol = SASL_SSL
              sasl.jaas.config = "org.apache.kafka.common.security.plain.PlainLoginModule required username='UJXR2AHHSOHL2O4K' password='L4piWdT0pE4t+LiP5xLrkfWxmhePL8jdk0LaSX2N5cSevSBF1EHjr2oygqJX64FC';"
              sasl.mechanism = PLAIN
              client.dns.lookup = use_all_dns_ips
              auto.offset.reset = latest
  }
        }
        buffer {
          byteLimit = 1000000
          recordLimit = 0
          timeLimit = 2000
        }
        appName = "snowplow"
      }
    }
  resolver.json: |
    {
      "schema": "iglu:com.snowplowanalytics.iglu/resolver-config/jsonschema/1-0-1",
        "data": {
          "cacheSize": 500,
          "repositories": [
            {
            "name": "Iglu Central",
            "priority": 0,
            "vendorPrefixes": [ "com.snowplowanalytics" ],
            "connection": {
              "http": {
                "uri": "http://iglucentral.com"
              }
            }
          },
          {
            "name": "Iglu Central - GCP Mirror",
            "priority": 1,
            "vendorPrefixes": [ "com.snowplowanalytics" ],
            "connection": {
              "http": {
                "uri": "http://mirror01.iglucentral.com"
              }
            }
          },
          {
            "name": "Custom Server",
            "priority": 0,
            "vendorPrefixes": [ "com.example_company" ],
            "connection": {
              "http": {
                "uri": "http://iglu-server.snowplow.svc.cluster.local:8081/api",
                "apikey": "e5d6a3d6-7b3c-4d0a-9e6a-123456789abc"
              }
            }
          }
        ]
      }
    }

---

# Stream Enrich Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stream-enrich
  namespace: snowplow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stream-enrich
  template:
    metadata:
      labels:
        app: stream-enrich
    spec:
      containers:
      - name: stream-enrich
        image: snowplow/stream-enrich-kafka:3.8.0
        args: ["--config", "/snowplow/config/config.hocon", "--resolver", "file:/snowplow/config/resolver.json"]
        volumeMounts:
        - name: config-volume
          mountPath: /snowplow/config
      volumes:
      - name: config-volume
        configMap:
          name: stream-enrich-config

---

# Stream Enrich Service
apiVersion: v1
kind: Service
metadata:
  name: stream-enrich
  namespace: snowplow
spec:
  selector:
    app: stream-enrich
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081

